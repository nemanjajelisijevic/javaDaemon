What is it?

	JavaDaemon is an annotation processing tool (java compiler plugin) that generates active objects (service wrapper classes) based on annotated user defined
	prototype classes. It can be used for creating multithreaded and reactive apps for JVM. I found it to be useful for making games.
	2D games for now, but with OpenGl it could become a full blown 3D multiplatform game engine.
	
	Of course, not something that could compare to big AAA engines, but something that could be useful and fun 
	to use in smaller scale games for now but with potential for aggressive expansure.
	
	That being said, it is not bound to game development only, it can be used in various kind of apps (Android, java desktop
	apps, even building server side components...).

	Its pure Java, so no platform dependencies.

About multithreading and concurrency:

	Multithreading is integral in todays software development, as it allows the program to leverage the power of
	multiple CPU cores, executng tasks fully in parrallel, making the program faster and more modular in a sense of
	distributing tasks. Most so in games.
	
	Programming a multithreaded app with only the language constructs like threads and synchronization primitives can
	be a tedious task. Many SDKs and frameworks include their own solution for easing the concurrency usage by the app developer,
	and there is a variety of libraries and frameworks to choose from.
	
	As many developers most certanly know, there is RXJava, and functionwise javaDaemon is same.
	While RXJava relies on the observer design pattern to decouple subscribers and observers,
	not just to be independent compilation units and help code reuse, but to run in different threads,
	javaDaemon uses annotation processing to generate asynchronous versions of user designed classes.

	Furthermore, the concepts that make this possible in Java, can be applied to any OOP language in which a user has access to a compiler
	(langauages running on JVM) or sufficiently developed generic type system like C++ templates.

	Its a combination of OOP and functional programming for concurrency on steroids, is maybe a better way to describe it.

	What are those mentioned patterns?
	The Active Object design pattern decouples method execution from method invocation for objects that each reside in their 
	own thread of execution.
	The Producer/Consumer pattern is used to decouple threads that produce and consume data at different rates.

So, to start off with the basics.

Conteptual overview of javaDaemon

	Technically, its just two java libraries. DaemonEngine and DaemonProcessor. Engine lib contains threading plumbing and service api
	and processor is a java compiler plugin for generating specific service wrapper classes based on user defined ones.

	From users perspective there are also two main components: Daemons and Consumers. 
	
	For the sake of clarity, the concept of Consumers will be explained first. 

	First off, yes, yes, I know that Consumers are a part of java.util.function and represent a generic function object
	with a method that accepts one parameter, but I decided to give that name to an entity that actually executes above mentioned functors in its own context.
	An entity that Consumer represents in java.utils.function, in this project is named Closure.

	Its a pretty common concept, so if it bores you, just skip it, but I found, as I was learning programming, every explanation 
	is valuable.

	Consumer in javaDaemon:

		Today, the most used architecture in application frameworks is the event-loop based one.

		Event loop is a loop that is executed by one thread, main or dedicated, constantly checking on a certain condition 
		(synchronization primitive) to regulate its idle time (awaiting on a condition) so it
		wouldn't eat up CPU cycles needlessly when there is nothing to be computed. Thus, its only active when an event of certain data type is
		dispatched to it, it reacts to the event by running some developer specifiied function.

		Usually, event loop is waiting while some data structure (ie. queue) associated with it, is empty. Queue being empty 
		represents the condition to idle, and when an event is dispatched it means that the event is enqueued to the queue, so
		it can be retrieved by event loop and used in the event handling procedure developer specifies. Events are created as a 
		result of some specific task hat has been executed in some other threads context (producer thread). All together, they 
		represent the producer-consumer scenario. 

		As every program starts with the programs one thread executing the main function, somewhere in that function (ussually 
		after setting up and allocating all of the needed frameworks runtime data and other threads for running the users 
		logic code), that main thread is stuck in an event-loop. Its commonly called GUI thread as it works with the Graphical 
		User Interface (updating the GUI components like texts and images, as well as reacting to user controls like buttons 
		etc.). Conventionally, its not recomended to run bussines logic code in the gui thread, especially if that code takes
		some time to execute, since it will block the main thread and cause the UI halt (app not responding).

		So delegating the business logic tasks to other threads in application is desired (like reacting to the button click 
		that symbolyzes a task to be done), and when those tasks are done an event is sent form the tasks thread to the GUI 
		threads' event loop to update the views.

		As in some other frameworks, an event that gets consumed in JavaDaemon is the function object (functor) and its specializations 
		in form of Closures, which are objects that just encapsulate the algorithm to be executed (same as java.util.function).

		Those objects are the base of functional programming (in Java at least, different languages have different 
		implementations) and can be written as lambda expressions. They are sucessors of functors in C++
		or function pointers in C. Their main purpouse is allowing the functions to be passed around as if they were objects 
		(data types).

		So, the Consumer type in javaDaemon is a class that encapsulates an event loop thread that executes all fuction objects and 
		Closures dispatched to it by other threads. Consumer can be the main (GUI) thread itself or it can be a standalone thread, however the 
		developer chooses to implement it.

	The Daemon:

		Daemon is the other part of the framework. The namebearer. It is 
		named after daemon process in unix like OSes. In that sense, a daemon is a long-running background process 
		that answers requests for specific services provided by the OS.
		
		Again, as with the consumer, there is a name discrepancy, because the
		built-in java user Thread can be made daemon (programs main thread will not wait for it to join).
		
		The Daemon represents user defined object in form of an active object. An active object because it 
		encapsulates a dedicated thread (or more than one).
		Any kind of user defined class can be used as a prototype for a Daemon. Furthermore, all the logic of users methods and 
		state of the member fields are undisturbed by presence of Daemons.

		So, basically, Daemon is a class wrapper for developer written prototype class. It accepts users prototype class as a 
		constructor parameter, encapsulating the reference to it, and maps marked (annotated) PUBLIC, user written, 
		prototype method to their asynchronous counterpart.
		
		So, if there was an extremly complicated and long running algorithm for some kind of string editing,
		a user defined class migght look like this:
		
			@Daemon
			public class UserDefinedStringEditor {

				@Daemonize
				public String editString(String original) {
					// long running algorithm...
				}
			}

		a generated Daemon wrapper class would look like:

			public class UserDefinedStringEditorDaemon implements Daemon {

				//construct
				public UserDefinedStringEditorDaemon(Consumer consumer, UserDefinedStringEditor prototype) {...}

				//daemonized
				public void editString(String original, Closure<String> closure) {...}
				
				//Daemon service methods
				UserDefinedStringEditorDaemon start() {...}
				void stop() {...}
			}

		And once a Daemon object has been instantiated:
		
			DaemonConsumer consumer = ...;
		
			UserDefinedStringEditorDaemon stringEditDaemon = new UserDefinedStringEditorDaemon(consumer, new UserDefinedStringEditor());
		
		it can be used:
		
			stringEditDaemon.start().editString("Example string", returnString -> { 
				
				//Make use of the returnString (return value of the original UserDefinedStringEditor::editString method) 
				//that has been edited in the dedicated thread of stringEditDaemon...
				
				stringEditDaemon.stop();
			});

	
	
		To break this down. As the example showcases, an instance of UserDefinedStringEditorDaemon has been allocated with its
		user defined prototype as a second constructor argument. The first argument represents the Consumer object reference (the event loop)
		that will execute the closures passed do daemonized methods in its own thread context. 
		
		In this case the Consumer will execute the lambda function passed as a second argument of the editString method. 
		It will execute the closure (lambda) after the editString method returns in Daemons dedicated thread, and the closure runs 
		in consumers thread instead. 
		
		
		
	


		Just public methods. Privates and protecteds access modifiers make no sense in this context, thus enforcing the user 
		class API.

		It could be said that, underneath, Daemons also function by following the producer consumer scenario. Actually, they can 
		also be considered consumers, if you think of the scope 
		that made the method call as a producer. But, from another point of view, Daemons are producers. They produce the return 
		value of the users class method and dispatch it to 
		the Consumer via Closures.

		For each prototype marked method there is a little class generated that carries all of the arguments with it - I call it 
		the Quest :).
		Every marked method gets its own subtype of a Quest class with different params, mirroring the signature of the marked 
		user method. As there is a base Quest class for all of the methods, they can be enqueued to the call queue, upon which 
		the Daemon thread consumes, thus, effectivly calling the prototype method in Daemon threads context resolved by the type 
		of the quest. When the user method returns, Daemon dispatches its return value to the predefined Consumer in form of a 
		Closure or Runnable (if the method is void, but the caller needs to be notified that the method is done).

		Not all of the Daemons methods are asyncronous, just the marked ones. Because, obviously, simple methods like acessors 
		dont need to be executed asynchronously.

		So when the Daemons async method is called, the call is enqueued to one of the Daemons thread engine call queues, and 
		calling thread returns immediately (definition of asynchronous execution). The fact that it returns immediately allows 
		the call to be made from a Consumer, so the consumer can continue looping and serving other Daemons and their Closures.

		In that way, Daemons and Consumers complement each other.

Allright, but how do I use it?

	Annotations.

	Another great tool of the Java compiler. There are lots of usages for annotations, and here, its the boilerplate code 
	generation. In javaDaemon, boilerplate is the multithreading code. With annotations developer can mark a class to be processed 
	in compile time, and with a little build process configuration, a Daemon wrapper class is generated.
	
	Daemon generated classes take the form of service objects and implement the start() and stop() methods, understanadbly, as they 
	extend the functionality of threads. So, instancing a Daemon isnt enough, it has to be explictly started and stopped.
	
	Class to be "daemonized" is annotated with @Daemon, and a method that is chosen by a developer to execeute asynchronously, with
	@Daemonize. There are various options for fine tunning but they would take quite a bit of explaining. Another mode of service
	configurartion is @SideQuest method annotation. This annotation is used to mark a method that should constantly execute, over 
	and over, until stopped, with or without pauses.
	
	There are constraints in usage, for sure. Like @SideQuest method cant take in any parameters, and more for other kinds of modes,
	but that will be explained in depth some other time.
	
	An example:

		@Daemon(doubleDaemon = true)
		public interface MovableAnimator extends .... {

			@Daemonize
			public boolean goTo(int x, int y, float velocity);

			@SideQuest(SLEEP = 25)
			public PositionedImage animate();
		}	
	
	Here is an abstraction that describes a movable object in 2D plane. @SideQuest will make sure that a dedicated thread engine
	will be generated to call animate method every 25ms. 
	Any concrete implementation of that interface can contain specfic animation techniques and allows the developer to
	annotate an interface and use it with any implementation they like.
	
	Animate method returns PositionedImage object which contains new x and y coords, as well as the current image (from sprite)
	to be drawn.
	
	Go to method calculates, lets say, the direction and velocity of the Movable object, wait for animation engine to actually
	draw this frame by frame, and return the outcome. Because it will have its own thread of execution, it can rest on a codition or 
	a semaphore until animating thread engine is done.
	
	Daemon looks like this:

		public class MovableAnimatorDaemon {

			private MovableAnimator prototype;

			private EagerMainQuestDaemonEngine mainEngine;
			private SideQuestEngine sideEngine;

			MovableDaemon(Consumer consumer, MovableAnimator prototype) {
				this.prototype = prototype;
				//init engines...
			}

			public MovableAnimatorDaemon goTo(int x, int y, float velocity, Closure<Boolean> closure) {
				//enqueue goTo on EagerMainQuestDaemonEngine mainEngines call queue...
				return this;
			}

			public SideQuest setAnimateSideQuest(Consumer consumer) {
				//init quest for animation and configure it to run on sideEngine...
				return sideQuest;
			}

			//quests definitions and stuff...
		}
	
	And, the usage:
	
		...

		Consumer gameConsumer; //consumer dedicated to executing game logic
		Consumer renderer; //consumer dedicated to rendering aka. The Renderer

		...

		//instantination - Bridge pattern
		MovableAnimatorDaemon movable = new MovableAnimatorDaemon(gameConsumer, new SpecificImplemetationOfMovable(...))
						.setName("SpecificImplemetationOfMovable Daemon");

		//sideQuest config
		movable.setAnimateSideQuest(renderer).setClosure(ret -> {
			PositionedImage posImg = ret.get();
			correspondingView.setX(posImg.getX())
					 .setY(posImg.getY())
					 .setImage(posImg.getImage());
		});

		//start the daemon and go to specific coords
		movable.start().goTo(someX, someY, someVelocity, ret -> {
			if (ret.get()) { //if the movable has arrived do some more logic
				//fire bullet or land a mine or whatever
				//and if damaged get some healing...
			} else
				movable.stop();
		});

		//or just go to another coords
		movable.goTo(firstX, firstY, firstVel, ret -> if (ret.get()) movable.goTo(secondX, secondY, secondVel, ret2 -> ...));

		//or use anon class as closure and get the Closures this ptr
		//and lock the movable in a multithreaded recursion
		//also a signature of Closure can be seen
		movable.goTo(x, y, vel, new Closure<Boolean> {
			@Override
			public void onReturn(Return<Boolean> ret) {
			
				//guard against invalid return
				//Return class has addtitonal logic for exception handling 
				if(!ret.get()) { 
					movable.stop();
					return;
				}
			
				//do the logic
				//calculate next x, y , velocity
				//and then go to next coords with the same closure allocated here
				movable.goTo(nextX, nextY, nextVel, this::onReturn);
			}
		});
		
	Now, some of the reactions I got from developers I consulted with is about calling generated code.
	
So, how is this implemented?

	There are two components to JavaDaemon. They are directly translated to two libraries. 

	Daemonengine is a runtime library that provides thread plumbing via engines that make Daemons run in different threads.
	Daemonprocessor is a compile time component, a library with an entrypoint in a specialized Java Annotation processor.

	When configured in a project the Daemonprocessor scans the project for annotated classes. When it finds them it generates 
	Daemons.
	As said, 

	//JavaPoet praise
	//platform code abstraction

Pros and cons (constraints)

	//Multiplatform programming and Gradle build tools and MOE research
	//OOP iheritance and polymorphism
	//Design patterns and SOLID
	//Division of class methods by the executing thread
	//Synchronization...

Why games? And why Java?

	I know that Java developers code with little care about programs performances, since Java is used for non preformance
	critical applications or backend apps which run on superbuff mighty servers. Furthermore, this kind of usage and the fact
	that it began with the rise of internet and web programming, had dubbed Java as a "slow" language in terms of execution 
	performance. Sure, its slower than C/C++, because there is some interpretation by JVM, but today, with this kind of hardware 
	that is used even in mobile devices, and some performance optimization skills, I have no doubt that a game of modest size, at 
	least, can be made with a lot less effort than before.
	
	//Todays Hardware 

Contemplating the future
